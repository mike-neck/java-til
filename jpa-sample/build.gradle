buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath group: 'org.junit.platform', name: 'junit-platform-gradle-plugin', version: '1.0.0-M4'
  }
}

apply plugin: 'java'
apply plugin: 'org.junit.platform.gradle.plugin'

ext {
  libDir = file('lib')
  schemaspyJar = libDir.toPath().resolve('schemaspy.jar').toFile()
  diagramDir = file("${buildDir}/er-diagram")
  tmpDir = file("$buildDir/tmp/diagram")
  genDiagramShell = file("$buildDir/tmp/diagram/generate.sh")
}

repositories {
  mavenCentral()
}

sourceSets {
  main {
    java {
      srcDir file("$buildDir/generated")
    }
  }
}

task downloadSchemaspy(group: 'Setup', description: 'downloads schemaspy jar and put it to lib directory') {
  def schemaspyVersion = '6.0.0-rc1'
  def url = URI.create(
          "https://github.com/schemaspy/schemaspy/releases/download/v${schemaspyVersion}/schemaspy-${schemaspyVersion}.jar")
          .toURL()

  onlyIf { !schemaspyJar.exists() }
  outputs.upToDateWhen { schemaspyJar.exists() }
  outputs.file schemaspyJar
  doLast {
    if (!libDir.exists()) {
      libDir.mkdir()
    }
    logger.lifecycle('start downloading schemaspy.jar')
    logger.lifecycle("schemaspy exists: ${schemaspyJar.exists()}")
    url.withInputStream {u ->
      def bytes = new byte[8096]
      schemaspyJar.withOutputStream {f ->
        while (u.read(bytes) != -1) {
          f.write(bytes)
          print '.'
        }
      }
    }
  }
}

configurations {
  querydsl
  eclipselink
  mysql
}

dependencies {
  compile group: 'com.google.inject', name: 'guice', version: '4.1.0'
  compile group: 'com.google.inject.extensions', name: 'guice-persist', version: '4.1.0'
  compile group: 'org.eclipse.persistence', name: 'eclipselink', version: '2.6.4'
  eclipselink group: 'org.eclipse.persistence', name: 'eclipselink', version: '2.6.4'
  compile group: 'mysql', name: 'mysql-connector-java', version: '6.0.6'
  mysql group: 'mysql', name: 'mysql-connector-java', version: '6.0.6'
  compile group: 'com.lambdaworks', name: 'scrypt', version: '1.4.0'

  compileOnly group: 'com.querydsl', name: 'querydsl-apt', version: '4.1.4'
  querydsl group: 'com.querydsl', name: 'querydsl-apt', version: '4.1.4'
  compile group: 'com.querydsl', name: 'querydsl-jpa', version: '4.1.4'

  testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.0.0-M4'
  testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.0.0-M4'
}

task generateQuery(type: JavaCompile, description: 'processes annotations', group: 'build') {
  source(sourceSets.main.java.asFileTree)
  classpath = configurations.compile.asFileTree
  options.annotationProcessorPath = configurations.querydsl.asFileTree + configurations.eclipselink.asFileTree
  options.compilerArgs << '-proc:only' << '-processor' << 'com.querydsl.apt.jpa.JPAAnnotationProcessor'
  destinationDir = file("$buildDir/generated")
}

tasks.compileJava.dependsOn tasks.generateQuery

task execSchemaspy(
    type: JavaExec,
    description: 'generates er-diagram',
    group: 'documentation',
    dependsOn: tasks.downloadSchemaspy) {
  def destinationDir = file("$buildDir/er-diagram")

  outputs.file destinationDir

  environment 'PATH', '/usr/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin'
  classpath schemaspyJar
  main = 'org.schemaspy.Main'
  args '-t', 'mysql'
  args '-dp', configurations.mysql.asPath
  args '-db', 'jpa_sample'
  args '-host', 'localhost'
  args '-port', '3306'
  args '-s', 'jpa_sample'
  args '-u', 'jpa'
  args '-p', 'jpa'
  args '-o', destinationDir
}

task showGenerateDiagramCommand(description: 'shows generate er-diagram command.', group: 'documentation') {
  doLast {
    logger.lifecycle "java -jar $schemaspyJar -t mysql -dp ${configurations.mysql.asPath} -db jpa_sample -host " +
            "localhost -port 3306 -s jpa_sample -u jpa -p jpa -o ${buildDir}/er-diagram"
  }
}

task generateDiagramCommand(group: 'documentation', description: 'generates er-diagram command.') {
  outputs.file genDiagramShell
  doLast {
    if (!tmpDir.exists()) {
      tmpDir.mkdirs()
    }
    genDiagramShell.write("""#!/usr/bin/env bash
java -jar $schemaspyJar \\
  -t mysql -dp ${configurations.mysql.asPath} \\
  -db jpa_sample -host localhost -port 3306 \\
  -s jpa_sample -u jpa -p jpa \\
  -o $diagramDir
""", 'UTF-8')
    genDiagramShell.executable = true
  }
}

task generateDiagram(type: Exec, group: 'documentation',
        description: 'generates er-diagram',
        dependsOn: generateDiagramCommand) {
  executable = genDiagramShell
  outputs.files(diagramDir)
  environment 'JAVA_HOME', '/Users/mike/.sdkman/candidates/java/current'
  environment 'PATH', '/usr/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin'
}

task prepareShowJvmHome {
  doLast {
    file("$buildDir/tmp/show-jvm-home.sh").write("""#!/usr/bin/env bash
echo ${'$'}PATH
echo ${'$'}JAVA_HOME
java -version
""")
    file("$buildDir/tmp/show-jvm-home.sh").executable = true
  }
}

task showJvmHome(type: Exec, dependsOn: 'prepareShowJvmHome') {
  executable = file("$buildDir/tmp/show-jvm-home.sh")
}
